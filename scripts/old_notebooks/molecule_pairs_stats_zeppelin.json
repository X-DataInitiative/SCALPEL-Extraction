{"paragraphs":[{"text":"// Please don't forget to change the path!\nval root_path = \"output/new_mlpp_features/mlpp_features/30B-1L/\"\nval features_path = root_path + \"parquet/SparseFeatures\"\nval outcomes_path = root_path + \"csv/Outcomes.csv\"\nval output_path = \"mlpp_stats/\"\n\nval featuresDF = spark.read.parquet(features_path).persist()\nval outcomesDF = spark.read.option(\"header\", \"true\").option(\"inferSchema\", \"true\").csv(outcomes_path).persist()\n\nfeaturesDF.printSchema\nfeaturesDF.count\noutcomesDF.count","user":"anonymous","dateUpdated":"2017-09-20T17:11:33+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","tableHide":false,"editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nroot_path: String = output/new_mlpp_features/mlpp_features/30B-1L/\n\nfeatures_path: String = output/new_mlpp_features/mlpp_features/30B-1L/parquet/SparseFeatures\n\noutcomes_path: String = output/new_mlpp_features/mlpp_features/30B-1L/csv/Outcomes.csv\n\noutput_path: String = mlpp_stats/\n\nfeaturesDF: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [patientID: string, patientIndex: int ... 7 more fields]\n\noutcomesDF: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [patientIndex: int, bucket: int]\nroot\n |-- patientID: string (nullable = true)\n |-- patientIndex: integer (nullable = true)\n |-- moleculeName: string (nullable = true)\n |-- moleculeIndex: integer (nullable = true)\n |-- bucketIndex: integer (nullable = true)\n |-- lagIndex: integer (nullable = true)\n |-- rowIndex: integer (nullable = true)\n |-- colIndex: integer (nullable = true)\n |-- value: double (nullable = true)\n\n\nres11: Long = 131111\n\nres12: Long = 2253\n"}]},"apps":[],"jobName":"paragraph_1497201519220_1767412495","id":"20170611-191839_413382698","dateCreated":"2017-06-11T19:18:39+0200","dateStarted":"2017-09-20T17:01:59+0200","dateFinished":"2017-09-20T17:02:02+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:381"},{"text":"def getMolPairs(l: List[String]): List[(String, String)]= {\n  l.permutations.flatMap(_.combinations(2)).map(i => (i(0), i(1))).toSet.toList ++ l.zip(l)\n}\n\ndef computePatientsPerMolecule(df: DataFrame): DataFrame = {\n  df.groupBy(\"moleculeName\").agg(countDistinct(\"patientID\").as(\"numPatients\")).orderBy(\"moleculeName\")\n}\n\ndef computeCancerHist(df: DataFrame): DataFrame = {\n  import df.sqlContext.implicits._ \n  val maxBucket = outcomesDF.select(\"bucket\").as[Int].reduce(math.max _)\n  val rangeDF = spark.range(maxBucket+1).withColumn(\"count\", lit(0)).withColumnRenamed(\"id\", \"bucket\")\n  df.groupBy(\"bucket\").count.union(rangeDF).groupBy(\"bucket\").max(\"count\").orderBy(\"bucket\")\n}","user":"anonymous","dateUpdated":"2017-09-20T17:11:33+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","tableHide":false,"editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ngetMolPairs: (l: List[String])List[(String, String)]\n\ncomputePatientsPerMolecule: (df: org.apache.spark.sql.DataFrame)org.apache.spark.sql.DataFrame\n\ncomputeCancerHist: (df: org.apache.spark.sql.DataFrame)org.apache.spark.sql.DataFrame\n"}]},"apps":[],"jobName":"paragraph_1497202052095_-1672094887","id":"20170611-192732_490251747","dateCreated":"2017-06-11T19:27:32+0200","dateStarted":"2017-09-20T17:02:49+0200","dateFinished":"2017-09-20T17:02:50+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:382"},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","tableHide":false,"editorHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1505919784577_-898429093","id":"20170920-170304_1368950871","dateCreated":"2017-09-20T17:03:04+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1440","text":"case class Schema(patientID: String, moleculeName: String, bucketIndex: Int)\ncase class Result(both: Int, before: Int, sameBucket: Int, gap: Option[Int], onlyMol1: Int, mol1WithoutMol2: Int)","dateUpdated":"2017-09-20T17:11:33+0200","dateFinished":"2017-09-20T17:03:46+0200","dateStarted":"2017-09-20T17:03:46+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ndefined class Schema\n\ndefined class Result\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","tableHide":false,"editorHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1505919853430_-1474090069","id":"20170920-170413_2138091411","dateCreated":"2017-09-20T17:04:13+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1547","text":"def check(list: List[Schema], pair: (String, String)): Result = {\n  val a1 = list.find(_.moleculeName == pair._1)\n  val a2 = list.find(_.moleculeName == pair._2)\n  \n  if(a1.isEmpty) return Result(0, 0, 0, None, 0, 0)\n  \n  val onlyMol1 = if(list.toSet.size == 1) 1 else 0\n  \n  if(a2.isEmpty) {\n    return Result(0, 0, 0, None, onlyMol1, 1)\n  }\n  \n  val before = if (a1.get.bucketIndex < a2.get.bucketIndex) 1\n  else 0\n  \n  val sameBucket = if (a1.get.bucketIndex == a2.get.bucketIndex) 1\n  else 0\n\n  val gap = if(a1.get.bucketIndex < a2.get.bucketIndex) Some(a2.get.bucketIndex - a1.get.bucketIndex)\n  else None\n  \n  Result(1, before, sameBucket, gap, onlyMol1, 0)\n}","dateUpdated":"2017-09-20T17:11:33+0200","dateFinished":"2017-09-20T17:04:32+0200","dateStarted":"2017-09-20T17:04:31+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ncheck: (list: List[Schema], pair: (String, String))Result\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","tableHide":false,"editorHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1505919858926_1028316778","id":"20170920-170418_295183564","dateCreated":"2017-09-20T17:04:18+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1603","text":"def computePairStats(df: DataFrame, pairs: List[(String, String)]) = {\n  \n  import df.sqlContext.implicits._  \n  val ds = df.groupBy(\"patientID\", \"moleculeName\").agg(min(\"bucketIndex\").cast(\"int\").as(\"bucketIndex\")).as[Schema]\n\n  pairs.map(\n    pair => {\n      ds.groupByKey(_.patientID).mapGroups {\n        (k, it) => check(it.toList, pair)\n      }.agg(\n        lit(pair._1).as(\"mol1\"),\n        lit(pair._2).as(\"mol2\"),\n        sum(\"both\").as(\"both\"),\n        sum(\"before\").as(\"before\"),\n        sum(\"sameBucket\").as(\"same_bucket\"),\n        mean(\"gap\").as(\"mean_gap\"),\n        min(\"gap\").as(\"min_gap\"),\n        max(\"gap\").as(\"max_gap\"),\n        sum(\"onlyMol1\").as(\"only_mol1\"),\n        sum(\"mol1WithoutMol2\").as(\"mol1_without_mol2\")\n      )\n    }\n  ).reduce(_.union(_)).orderBy(\"mol1\", \"mol2\")\n}","dateUpdated":"2017-09-20T17:11:33+0200","dateFinished":"2017-09-20T17:04:34+0200","dateStarted":"2017-09-20T17:04:34+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ncomputePairStats: (df: org.apache.spark.sql.DataFrame, pairs: List[(String, String)])org.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","tableHide":false,"editorHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1505919881250_-645310289","id":"20170920-170441_1434537761","dateCreated":"2017-09-20T17:04:41+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1709","text":"def writeDF(df: DataFrame, path_suffix: String): Unit = {\n  df.coalesce(1).write.option(\"header\", \"true\").csv(output_path + path_suffix)\n}","dateUpdated":"2017-09-20T17:11:33+0200","dateFinished":"2017-09-20T17:04:43+0200","dateStarted":"2017-09-20T17:04:43+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nwriteDF: (df: org.apache.spark.sql.DataFrame, path_suffix: String)Unit\n"}]}},{"text":"val molecules = List(\"INSULINE\", \"METFORMINE\", \"OTHER\", \"PIOGLITAZONE\", \"ROSIGLITAZONE\", \"SULFONYLUREA\")\nval molPairs = getMolPairs(molecules)\n\nval patientsPerMolecule = computePatientsPerMolecule(featuresDF)\nval cancerHist = computeCancerHist(outcomesDF)\nval pairStats = computePairStats(featuresDF, molPairs)","user":"anonymous","dateUpdated":"2017-09-20T17:11:33+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","tableHide":false,"editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nmolecules: List[String] = List(INSULINE, METFORMINE, OTHER, PIOGLITAZONE, ROSIGLITAZONE, SULFONYLUREA)\nmolPairs: List[(String, String)] = List((METFORMINE,SULFONYLUREA), (PIOGLITAZONE,SULFONYLUREA), (INSULINE,METFORMINE), (METFORMINE,INSULINE), (METFORMINE,ROSIGLITAZONE), (SULFONYLUREA,ROSIGLITAZONE), (METFORMINE,PIOGLITAZONE), (SULFONYLUREA,INSULINE), (OTHER,PIOGLITAZONE), (OTHER,METFORMINE), (ROSIGLITAZONE,METFORMINE), (SULFONYLUREA,PIOGLITAZONE), (INSULINE,SULFONYLUREA), (OTHER,ROSIGLITAZONE), (PIOGLITAZONE,INSULINE), (PIOGLITAZONE,METFORMINE), (INSULINE,PIOGLITAZONE), (ROSIGLITAZONE,INSULINE), (INSULINE,OTHER), (SULFONYLUREA,METFORMINE), (PIOGLITAZONE,OTHER), (METFORMINE,OTHER), (SULFONYLUREA,OTHER), (ROSIGLITAZONE,PIOGLITAZONE), (OTHER,INSULINE), (INSULINE,ROSIGLITAZONE), (OTHER,SULFONYLUREA), (ROSIGLITAZONE,SULFONYLUREA), (ROSIGLITAZONE,OTHER), (PIOGLITAZONE,ROSIGLITAZONE), (INSULI...\npatientsPerMolecule: org.apache.spark.sql.DataFrame = [moleculeName: string, numPatients: bigint]\n\ncancerHist: org.apache.spark.sql.DataFrame = [bucket: bigint, max(count): bigint]\n\npairStats: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [mol1: string, mol2: string ... 8 more fields]\n"}]},"apps":[],"jobName":"paragraph_1497202090459_-828664002","id":"20170611-192810_1322839646","dateCreated":"2017-06-11T19:28:10+0200","dateStarted":"2017-09-20T17:04:55+0200","dateFinished":"2017-09-20T17:04:58+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:383"},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"pieChart","height":300,"optionOpen":false,"setting":{"multiBarChart":{"stacked":false}},"commonSetting":{},"keys":[{"name":"moleculeName","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"numPatients","index":1,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","tableHide":false,"editorHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1497254655754_57699317","id":"20170612-100415_366728807","dateCreated":"2017-06-12T10:04:15+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:389","text":"z.show(patientsPerMolecule)","dateUpdated":"2017-09-20T17:11:33+0200","dateFinished":"2017-09-20T17:07:45+0200","dateStarted":"2017-09-20T17:07:43+0200","results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"moleculeName\tnumPatients\nINSULINE\t734\nMETFORMINE\t1706\nOTHER\t1203\nPIOGLITAZONE\t198\nROSIGLITAZONE\t102\nSULFONYLUREA\t1164\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false},"helium":{}}},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","tableHide":false,"editorHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1505919997793_-264608093","id":"20170920-170637_991111026","dateCreated":"2017-09-20T17:06:37+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1836","text":"z.show(cancerHist)","dateUpdated":"2017-09-20T17:11:33+0200","dateFinished":"2017-09-20T17:07:47+0200","dateStarted":"2017-09-20T17:07:46+0200","results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"bucket\tmax(count)\n0\t0\n1\t0\n2\t0\n3\t0\n4\t0\n5\t0\n6\t64\n7\t57\n8\t55\n9\t55\n10\t65\n11\t56\n12\t67\n13\t52\n14\t58\n15\t48\n16\t61\n17\t53\n18\t53\n19\t43\n20\t46\n21\t45\n22\t40\n23\t30\n24\t36\n25\t42\n26\t34\n27\t39\n28\t30\n29\t47\n30\t35\n31\t31\n32\t41\n33\t48\n34\t33\n35\t28\n36\t46\n37\t40\n38\t40\n39\t42\n40\t32\n41\t41\n42\t33\n43\t37\n44\t38\n45\t22\n46\t23\n47\t21\n48\t36\n49\t52\n50\t39\n51\t37\n52\t35\n53\t35\n54\t46\n55\t28\n56\t35\n57\t41\n58\t37\n59\t25\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":458,"optionOpen":false}}},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","tableHide":false,"editorHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1505920039907_1422343979","id":"20170920-170719_1801721423","dateCreated":"2017-09-20T17:07:19+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1982","text":"z.show(pairStats)","dateUpdated":"2017-09-20T17:11:57+0200","dateFinished":"2017-09-20T17:08:09+0200","dateStarted":"2017-09-20T17:07:57+0200","results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"mol1\tmol2\tboth\tbefore\tsame_bucket\tmean_gap\tmin_gap\tmax_gap\tonly_mol1\tmol1_without_mol2\nINSULINE\tINSULINE\t734\t0\t734\tnull\tnull\tnull\t125\t0\nINSULINE\tMETFORMINE\t491\t42\t98\t14.547619047619047\t1\t51\t125\t243\nINSULINE\tOTHER\t430\t90\t63\t13.722222222222221\t1\t58\t125\t304\nINSULINE\tPIOGLITAZONE\t82\t5\t8\t5.2\t1\t10\t125\t652\nINSULINE\tROSIGLITAZONE\t35\t0\t3\tnull\tnull\tnull\t125\t699\nINSULINE\tSULFONYLUREA\t386\t27\t61\t14.962962962962964\t1\t49\t125\t348\nMETFORMINE\tINSULINE\t491\t351\t98\t25.82051282051282\t1\t59\t350\t1215\nMETFORMINE\tMETFORMINE\t1706\t0\t1706\tnull\tnull\tnull\t350\t0\nMETFORMINE\tOTHER\t983\t538\t326\t17.58550185873606\t1\t59\t350\t723\nMETFORMINE\tPIOGLITAZONE\t170\t48\t94\t6.166666666666667\t1\t14\t350\t1536\nMETFORMINE\tROSIGLITAZONE\t91\t5\t77\t2.4\t1\t3\t350\t1615\nMETFORMINE\tSULFONYLUREA\t868\t246\t464\t19.475609756097562\t1\t58\t350\t838\nOTHER\tINSULINE\t430\t277\t63\t22.451263537906136\t1\t59\t66\t773\nOTHER\tMETFORMINE\t983\t119\t326\t14.3109243697479\t1\t54\t66\t220\nOTHER\tOTHER\t1203\t0\t1203\tnull\tnull\tnull\t66\t0\nOTHER\tPIOGLITAZONE\t163\t33\t44\t5.03030303030303\t1\t11\t66\t1040\nOTHER\tROSIGLITAZONE\t87\t3\t20\t2.0\t1\t3\t66\t1116\nOTHER\tSULFONYLUREA\t668\t161\t146\t19.18633540372671\t1\t59\t66\t535\nPIOGLITAZONE\tINSULINE\t82\t69\t8\t25.28985507246377\t1\t58\t1\t116\nPIOGLITAZONE\tMETFORMINE\t170\t28\t94\t16.464285714285715\t1\t43\t1\t28\nPIOGLITAZONE\tOTHER\t163\t86\t44\t13.744186046511627\t1\t54\t1\t35\nPIOGLITAZONE\tPIOGLITAZONE\t198\t0\t198\tnull\tnull\tnull\t1\t0\nPIOGLITAZONE\tROSIGLITAZONE\t25\t0\t0\tnull\tnull\tnull\t1\t173\nPIOGLITAZONE\tSULFONYLUREA\t132\t42\t53\t14.214285714285714\t1\t54\t1\t66\nROSIGLITAZONE\tINSULINE\t35\t32\t3\t24.78125\t1\t59\t0\t67\nROSIGLITAZONE\tMETFORMINE\t91\t9\t77\t29.77777777777778\t5\t55\t0\t11\nROSIGLITAZONE\tOTHER\t87\t64\t20\t11.375\t1\t54\t0\t15\nROSIGLITAZONE\tPIOGLITAZONE\t25\t25\t0\t7.84\t1\t11\t0\t77\nROSIGLITAZONE\tROSIGLITAZONE\t102\t0\t102\tnull\tnull\tnull\t0\t0\nROSIGLITAZONE\tSULFONYLUREA\t63\t27\t31\t16.37037037037037\t1\t58\t0\t39\nSULFONYLUREA\tINSULINE\t386\t298\t61\t25.956375838926174\t1\t59\t166\t778\nSULFONYLUREA\tMETFORMINE\t868\t158\t464\t20.227848101265824\t1\t57\t166\t296\nSULFONYLUREA\tOTHER\t668\t361\t146\t17.858725761772853\t1\t59\t166\t496\nSULFONYLUREA\tPIOGLITAZONE\t132\t37\t53\t6.243243243243243\t1\t12\t166\t1032\nSULFONYLUREA\tROSIGLITAZONE\t63\t5\t31\t1.6\t1\t3\t166\t1101\nSULFONYLUREA\tSULFONYLUREA\t1164\t0\t1164\tnull\tnull\tnull\t166\t0\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","tableHide":false,"editorHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1505920077099_1042273363","id":"20170920-170757_2006608403","dateCreated":"2017-09-20T17:07:57+0200","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2255","dateUpdated":"2017-09-20T17:11:33+0200"}],"name":"mlpp_features_stats","id":"2CM8KAZ6N","angularObjects":{"2CJ1RXUXT:shared_process":[],"2CHP9YDDF:shared_process":[],"2CFDU5455:shared_process":[],"2CH7ZK2KE:shared_process":[],"2CG5RVCSY:shared_process":[],"2CGMKUKXG:shared_process":[],"2CG1YX5PS:shared_process":[],"2CF8CAWK5:shared_process":[],"2CJ767K7J:shared_process":[],"2CJ4QS4QR:shared_process":[],"2CG548QV9:shared_process":[],"2CGM941QE:shared_process":[],"2CG7UKH77:shared_process":[],"2CHZBPRNK:shared_process":[],"2CF3PHQUP:shared_process":[],"2CHRF9GZ5:shared_process":[],"2CH55SU8Y:shared_process":[],"2CFWJJUQ3:shared_process":[],"2CGYSF5ER:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}